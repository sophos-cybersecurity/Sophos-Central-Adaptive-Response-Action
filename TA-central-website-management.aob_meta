{"alert_action_builder": {"modular_alerts": [{"description": "To customize control for specific websites, add them to this list. Tag them to create groups of sites, like custom categories, that you can control in individual policies, or override the Sophos category for a site to change it for all your users", "largeIcon": "", "smallIcon": "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", "label": "Add in Sophos Central", "short_name": "add_in_sophos_central", "active_response": {"technology": [{"vendor": "Sophos", "product": "Central", "version": ["1.0.0"]}], "supports_adhoc": true, "category": ["Information Conveyance"], "task": ["update"], "subject": ["endpoint"], "drilldown_uri": ""}, "parameters": [{"format_type": "text", "required": false, "name": "enter_urls_domains_tlds_ip_addresses_or_cidr_ranges", "label": "ENTER URLS, DOMAINS, TLDS, IP ADDRESSES, OR CIDR RANGES", "default_value": "", "help_string": "", "type": "", "value": "194.76.227.129/banks/Meridian/?sessionid=5e639134cbdf89db4243214a433b2426&securessl=true"}, {"format_type": "dropdownlist", "required": false, "name": "category_override", "label": "CATEGORY OVERRIDE", "default_value": "", "help_string": "", "possible_values": {"Option2": "option2", "Option3": "option3", "Hacking": "19"}, "type": "", "value": "19"}, {"format_type": "text", "required": false, "name": "tag", "label": "Tag", "default_value": "", "help_string": "", "type": "", "value": "BlockDomain"}, {"format_type": "text", "required": false, "name": "comment", "label": "Comment", "default_value": "", "help_string": "", "type": "", "value": "BlockDomain-Testing"}], "code": "\n# encoding = utf-8\nimport json\nimport re, urllib\nimport requests\n\n\ndef response(url, resp, helper):\n    \n    if resp.status_code not in (200, 201, 204):\n        helper.log_error('Failed to query api. url={}, HTTP Error={}, content={}'.format(url, resp.status_code, resp.text))\n        return json.dumps(None)\n    else:\n        return resp.content\n        \ndef get_central_token(helper, auth_url, payload):\n\n    resp = requests.post(auth_url, data=payload, verify=False)\n    content = response(auth_url, resp,helper)\n    x = json.loads(content)\n    token = x[\"access_token\"]\n    return token\n        \n\ndef whoami(helper, whoami_url, token):\n    \n    header = {\"Authorization\": \"Bearer {}\".format(token)}\n\n    resp = requests.get(whoami_url, headers=header, verify=False)\n    content = response(whoami_url, resp, helper)\n    x = json.loads(content)    \n    tenant_id = x[\"id\"]\n    idType = x[\"idType\"]\n    if idType == \"tenant\":\n        dataRegion = x[\"apiHosts\"][\"dataRegion\"]\n        return tenant_id,  idType, dataRegion\n    else:\n        return tenant_id,  idType, None\n        \n\ndef list_tenants(helper, idType, token, category_override, enter_urls_domains_tlds_ip_addresses_or_cidr_ranges, comment, tag, tenant_id, list_url):\n\n    idType = idType.title()\n\n    header = {\"Authorization\": \"Bearer {}\".format(token),\n            \"X-{}-ID\".format(idType) : \"{}\".format(tenant_id),\n            \"Accept\" : \"application/json\",\n            \"Content-Type\": \"application/json\"}\n        \n    resp = requests.get(list_url, headers=header, verify=False)\n    content = response(list_url, resp, helper)\n    x = json.loads(content)\n    helper.log_info(\"list_t={}\".format(x))\n    for y in range(len(x['items'])):\n        tenant_id = x['items'][y]['id']\n        dataRegion = x['items'][y]['apiHost']\n        name = x['items'][y]['name']\n        blockincentral(helper, token, tenant_id, category_override, dataRegion, enter_urls_domains_tlds_ip_addresses_or_cidr_ranges, comment, tag)\n\n        \ndef blockincentral(helper, token, tenant_id, category_override, dataRegion, enter_urls_domains_tlds_ip_addresses_or_cidr_ranges, comment, tag):\n    \n    header = {\"Authorization\": \"Bearer {}\".format(token),\n            \"X-Tenant-ID\" : \"{}\".format(tenant_id),\n            \"Accept\" : \"application/json\",\n            \"Content-Type\": \"application/json\"}\n    payload2={\n            \"url\": enter_urls_domains_tlds_ip_addresses_or_cidr_ranges,\n             \"tags\": [\n                    tag\n                    ],\n            \"categoryId\": \"{}\".format(category_override),\n            \"comment\" : \"{}\".format(comment)\n            }\n    block_url = \"{}/endpoint/v1/settings/web-control/local-sites\".format(dataRegion)\n    \n    resp = requests.post(block_url, json=payload2, headers=header, verify=False)\n    content = response(block_url, resp, helper)\n    x = json.loads(content)\n    helper.log_info(\"output={}\".format(x))\n\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets the setup parameters and prints them to the log\n    client_id = helper.get_global_setting(\"client_id\")\n    helper.log_info(\"client_id={}\".format(client_id))\n    client_secret = helper.get_global_setting(\"client_secret\")\n    helper.log_info(\"client_secret={}\".format(client_secret))\n\n    # The following example gets the alert action parameters and prints them to the log\n    enter_urls_domains_tlds_ip_addresses_or_cidr_ranges = helper.get_param(\"enter_urls_domains_tlds_ip_addresses_or_cidr_ranges\")\n    helper.log_info(\"enter_urls_domains_tlds_ip_addresses_or_cidr_ranges={}\".format(enter_urls_domains_tlds_ip_addresses_or_cidr_ranges))\n\n    category_override = helper.get_param(\"category_override\")\n    helper.log_info(\"category_override={}\".format(category_override))\n\n    tag = helper.get_param(\"tag\")\n    helper.log_info(\"tag={}\".format(tag))\n\n    comment = helper.get_param(\"comment\")\n    helper.log_info(\"comment={}\".format(comment))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n    \n    # The following example gets the alert action parameters and prints them to the log\n    enter_urls_domains_tlds_ip_addresses_or_cidr_ranges = helper.get_param(\"enter_urls_domains_tlds_ip_addresses_or_cidr_ranges\")\n    helper.log_info(\"enter_urls_domains_tlds_ip_addresses_or_cidr_ranges={}\".format(enter_urls_domains_tlds_ip_addresses_or_cidr_ranges))\n    category_override = helper.get_param(\"category_override\")\n    helper.log_info(\"category_override={}\".format(category_override))\n    tag = helper.get_param(\"tag\")\n    helper.log_info(\"tag={}\".format(tag))\n    comment = helper.get_param(\"comment\")\n    helper.log_info(\"comment={}\".format(comment))\n   \n    helper.log_info(\"Alert action tines_webhook started.\")\n    \n    auth_url = \"https://id.sophos.com/api/v2/oauth2/token\"\n    whoami_url = \"https://api.central.sophos.com/whoami/v1\"\n    list_url = \"https://api.central.sophos.com/organization/v1/tenants\"\n    \n    payload={\n            \"grant_type\": \"client_credentials\",\n            \"client_id\": helper.get_global_setting(\"client_id\"),\n            \"client_secret\": helper.get_global_setting(\"client_secret\"),\n            \"scope\": \"token\"\n            }\n    \n    # TODO: Implement your alert action logic here\n    token = get_central_token(helper, auth_url, payload)\n    tenant_id, idType, dataRegion = whoami(helper, whoami_url, token)\n    helper.log_info(\"idType={}\".format(idType))\n    \n    if idType == \"tenant\":\n        blockincentral(helper,  token, tenant_id, category_override, dataRegion, enter_urls_domains_tlds_ip_addresses_or_cidr_ranges, comment, tag)\n    else:\n        list_tenants(helper, idType, token, category_override, enter_urls_domains_tlds_ip_addresses_or_cidr_ranges, comment, tag, tenant_id, list_url)\n    \n    return 0\n", "uuid": "bd13c3edc03c4a17b113a01c6d893cc7"}]}, "basic_builder": {"appname": "TA-central-website-management", "friendly_name": "Central Website Management", "version": "1.0.0", "author": "Amit Panjawani", "description": "Manage, categorize, and tag websites for Sophos Central to use with Web Control and Web Gateway features.", "theme": "#007aff", "large_icon": "", "small_icon": "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", "visible": true, "tab_version": "3.0.1", "tab_build_no": "2", "build_no": 2}, "global_settings_builder": {"global_settings": {"customized_settings": [{"format_type": "password", "required": false, "name": "client_id", "label": "client_id", "default_value": "", "help_string": "", "internal_name": "", "type": "password", "value": ""}, {"format_type": "password", "required": false, "name": "client_secret", "label": "client_secret", "default_value": "", "help_string": "", "internal_name": "", "type": "password", "value": ""}]}}}